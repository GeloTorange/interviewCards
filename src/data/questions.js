export const QUESTIONS = [
  {
    id: 'js-closures',
    topic: 'JavaScript',
    question: 'Что такое замыкание в JavaScript?',
    answer:
      'Замыкание — это функция вместе с её лексическим окружением. Оно позволяет функции получать доступ к переменным внешней функции даже после её завершения.'
  },
  {
    id: 'react-state',
    topic: 'React',
    question: 'Чем отличается состояние (state) от пропсов (props) в React?',
    answer:
      'Props передаются родителем и неизменяемы внутри компонента. State управляется самим компонентом и может изменяться с помощью setState/useState.'
  },
  {
    id: 'css-specificity',
    topic: 'CSS',
    question: 'Что такое специфичность (specificity) в CSS?',
    answer:
      'Специфичность — это способ определить, какие стили будут применены к элементу. Она рассчитывается по селекторам: inline-стили > ID > классы/атрибуты/псевдоклассы > теги и псевдоэлементы.'
  },
  {
    id: 'http-methods',
    topic: 'Web',
    question: 'Назовите основные HTTP-методы и их назначение.',
    answer:
      'GET — получение данных, POST — создание ресурса, PUT/PATCH — обновление, DELETE — удаление. Также есть вспомогательные методы: OPTIONS, HEAD и др.'
  },
  {
    id: 'algorithms-big-o',
    topic: 'Алгоритмы',
    question: 'Что описывает нотация Big O?',
    answer:
      'Big O описывает верхнюю границу сложности алгоритма по времени или памяти относительно размера входных данных.'
  },
  {
    id: 'react-hooks-rules',
    topic: 'React',
    question: 'Назовите два основных правила работы с React Hooks.',
    answer:
      'Вызывать хуки только на верхнем уровне компонента (не в циклах, условиях и вложенных функциях) и только внутри функциональных компонентов или собственных хуков.'
  },
  {
    id: 'typescript-benefits',
    topic: 'TypeScript',
    question: 'Какие преимущества даёт использование TypeScript?',
    answer:
      'TypeScript добавляет статическую типизацию, что помогает находить ошибки на этапе разработки, улучшает автодополнение и облегчает рефакторинг.'
  },
  {
    id: 'git-rebase',
    topic: 'Git',
    question: 'Чем отличается git rebase от git merge?',
    answer:
      'git merge сохраняет историю ветвления, создавая дополнительный коммит. git rebase переписывает историю, перемещая коммиты поверх целевой ветки, создавая более линейную историю.'
  },
  {
    id: 'db-indexes',
    topic: 'Базы данных',
    question: 'Зачем нужны индексы в базах данных?',
    answer:
      'Индексы ускоряют поиск строк по ключам, позволяя СУБД быстро находить данные без полного сканирования таблицы.'
  },
  {
    id: 'system-design-scaling',
    topic: 'System Design',
    question: 'Какие есть подходы к масштабированию приложений?',
    answer:
      'Вертикальное масштабирование увеличивает ресурсы одной машины, горизонтальное добавляет новые узлы. Часто комбинируют оба подхода вместе с кешированием, балансировкой нагрузки и разделением сервисов.'
  }
];
